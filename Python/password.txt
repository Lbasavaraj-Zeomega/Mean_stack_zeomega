1)
class Basepassword :
    dict={}
    l=[]

    def __init__(self,user,password):
        self.user=user
        self.password=password
        Basepassword.dict[self.user]=self.password
        Basepassword.l.append(self.password)
        #print(Basepassword.a)
        #print(Basepassword.b)
    def get_password(self,user):
        for u in  self.dict:
            if u== user:
                return self.dict[u]

    def iscrct(self, password):
        if password == self.password:
            return True
        else:
            return False
    def set_level(self,password):
        if password.isalpha() or password.isnumeric():
            return 0
        elif password.isalnum():
            return 1
        else:
            return 2
    def set_password(self,new_password):
        if len(new_password)<6:
            print("new password is weaker")
        if self.set_level(new_password) > self.set_level(self.password):


            self.password==new_password
            Basepassword.dict[self.user]=new_password
            #print(self.user)
            print("password changed successfully")
        else:
            print("old password is stronger")



a1=Basepassword('Basavaraj','basu12')
b1=Basepassword("laxmi","laxmipatil")
print(b1.iscrct("laxmipatil"))
print(a1.get_password("Basavaraj"))
print(a1.set_level("Basavaraj@"))
print(Basepassword.dict)
a1.set_password('basavaraj@12')
print(Basepassword.dict)
print(a1.get_password("Basavaraj"))





2)
class BasePasswordmanager:
    old_passwords = []
    users = {}

    def __init__(self,username,password):
        self.username = username
        self.password = password
        BasePasswordmanager.users[self.username] = self.password
        BasePasswordmanager.old_passwords.append(self.password)

    def get_password():
        return BasePasswordmanager.old_passwords[-1]

    def is_correct(pass1):
        if pass1 == BasePasswordmanager.old_passwords[-1]:
            return True
        else:
            return False
class PasswordManager(BasePasswordmanager):
    SpecialSym = ['$', '@', '#', '%']

    def set_method(user, new_password,pos):
        if any(j in PasswordManager.SpecialSym for j in new_password) and any(j.islower() for j in new_password) \
        and any(j.isupper() for j in new_password) and any(j.isdigit() for j in new_password) and len(new_password)>=6 \
        and len(new_password) > len(BasePasswordmanager.old_passwords[pos-1]):
            BasePasswordmanager.old_passwords[pos-1] = new_password
            BasePasswordmanager.users[user] = new_password

            # self.password = new_password
            return 'Password is set'
        else:
            return 'Levels are not satified'
    def get_level(p1):

        if p1.isalpha() or p1.isdigit():
            return 'Password Level is 0'
        elif p1.isalnum():
            return 'Password Level is 1'
        elif any(j in PasswordManager.SpecialSym for j in p1) and any(j.islower() for j in p1) \
                and any(j.isupper() for j in p1) and any(j.isdigit() for j in p1) and len(p1) >= 6:
            return 'Password Level is 2'
        else:
            return 'Password is not able to determine'

user1 = BasePasswordmanager('Raghu','Raghu@123')
user2 = BasePasswordmanager('Ravi','raghu')
user3 = BasePasswordmanager('Raju','raju')

# print(PasswordManager.is_correct('raghuravi'))
# print(PasswordManager.is_correct('raju'))
print('Passwords list is ',BasePasswordmanager.old_passwords)

print('Getting the current Password', BasePasswordmanager.get_password())

print('Changing the user Password ', PasswordManager.set_method('Raghu' , 'Raghu12',1))


print('security Level of current password', PasswordManager.get_level(BasePasswordmanager.old_passwords[-1]))


print('security Level of General password', PasswordManager.get_level('Raghu@123'))

print('Updated Passwords list is ', BasePasswordmanager.old_passwords)

print('Usernames and their Password is ', BasePasswordmanager.users)